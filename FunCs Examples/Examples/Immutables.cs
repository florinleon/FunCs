/**************************************************************************
 *                                                                        *
 *  Description: FunCs Examples                                           *
 *  Website:     https://github.com/florinleon/FunCs                      *
 *  Copyright:   (c) 2019, Florin Leon                                    *
 *                                                                        *
 *  This code and information is provided "as is" without warranty of     *
 *  any kind, either expressed or implied, including but not limited      *
 *  to the implied warranties of merchantability or fitness for a         *
 *  particular purpose. You are free to use this source code in your      *
 *  applications as long as the original copyright notice is included.    *
 *                                                                        *
 **************************************************************************/

using System;
using FunCs;
using static System.Console;

namespace FunCsExamples
{
    public class Immutables
    {
        // The IntF and DoubleF types are provided only for demonstration purposes regarding immutability.
        // Their use for real life application would impact performance, given the overhead generated by creating
        // new objects, and code readability. Although the latter issue could be easily solved by adding another
        // implicit cast operators from int to IntF and from double to DoubleF, I did not want to include them.

        public static void Ex1()
        {
            var x = new IntF(2); // you must explicitly instantiate it
            // x += 1; // not allowed
            x = new IntF(x + 1);
            WriteLine(x);

            var y = new DoubleF(Math.Sqrt(x));
            WriteLine(y);
        }

        public static void Ex2()
        {
            IntF Sum(IntF n)
            {
                if (n == 0)
                    return new IntF(0);
                else
                {
                    var n1 = new IntF(n - 1);
                    return new IntF(n + Sum(n1));
                }
            }

            var s = Sum(new IntF(10));
            WriteLine(s);
        }
    }
}